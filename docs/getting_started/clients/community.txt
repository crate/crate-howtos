============================
Community Maintained Clients
============================

.. rubric:: Table of Contents

.. contents::
   :local:

Ruby
====

`Christoph Klocker <https://twitter.com/corck>`_ created a `Ruby driver
<http://rubygems.org/gems/crate_ruby>`_ and `Activerecord Adapter
<https://rubygems.org/gems/activerecord-crate-adapter>`_.

Scala
=====

`Alexander Jarvis <https://github.com/alexanderjarvis>`_ created a `Scala
driver <https://github.com/alexanderjarvis/crate-scala>`_ and adapter for the
`Play framework <https://github.com/alexanderjarvis/play-crate>`_.

Node.js
=======

We have several Node and JavaScript drivers. A simple `connector
<https://www.npmjs.com/package/crate-connect>`_ by herenow, `cratejs
<https://www.npmjs.com/package/cratejs>`_ by herenow which extends it and
`node-crate <https://www.npmjs.com/package/node-crate>`_ by `megastef
<https://github.com/megastef>`_ as an alternative.

Loopback
========

Lovely Systems created `a connector to CrateDB for Loopback
<https://github.com/lovelysystems/loopback-connector-crateio>`_, the Node.js
framework for connecting backend datasources.

Mono
====

`crate-mono is a Mono/.NET client driver
<https://github.com/mfussenegger/crate-mono>`_ implementing the ADO.NET
interface forwritten by `Mathias Fussenegger
<https://twitter.com/mfussenegger>`_.

GoLang
======

herenow wrote `a Golang driver for CrateDB
<https://github.com/herenow/go-crate>`_ that implements the Go sql interface
package.

Vim
===

Thanks to the work of Mathias Fussenegger and `David Fishburn
<https://github.com/dfishburn>`_, Vim users can connect to CrateDB clusters
from within the editor using the `dbext
<https://github.com/vim-scripts/dbext.vim>`_ plugin.

Perl
====

Mamod Mehyar created `DBD::Crate <https://github.com/mamod/DBD-Crate>`_, a
DBI/Perl driver for CrateDB.

.. rubric:: Next Steps

- :doc:`Scale <../scale/index>`
