.. _parallel_inserts:

================
Parallel Inserts
================

Because CrateDB is a clustered data with every node capable of handling client
requests, parallelizing (i.e. doing many at once) your inserts is one good way
to increase insert performance.

There are a few ways you can do this.

.. rubric:: Table of Contents

.. contents::
   :local:

Methods
=======

Use a Single Node
-----------------

Point your client application at a single node in your cluster, and send many
concurrent requests.

This is the least efficient way to do parallel inserts, because the
resources on that node can easily become a bottleneck.

Switch Between Multiple Nodes
-----------------------------

Configure your client application with a list of nodes in your cluster, and
select a random node each time a request is made.

The CrateDB `Python client`_, `JDBC client`_, and `PHP PDO client`_ support some
sort of multiple node configuration.

You can implement your own too.

This solves the bottleneck issue when using a single node, but it's still a
rudimentary approach that involves adding and removing node addresses manually
from your application configuration.

DNS Round Robin
---------------

When configuring your DNS, you can point the `A record`_ for a domain like
``crate.example.com`` at multiple IP addresses. When a client requests the IP
address for ``crate.example.com``, the DNS server will respond with a list of
IP address, often in a random order. The client typically uses the first IP
address in the list.

This can be used as a sort of rudimentary load balancing system.

There are a few problems:

- The DNS does not know about CrateDB nodes that have joined or left the
  cluster. You must update the configuration by hand each time.

- DNS results are often cached by clients.

  If you have a small number of clients, they will contact a small number of
  nodes in your cluster.

  DNS cache time (the *TTL* value) can be reduced, but this results in
  additional DNS overhead, and doesn't help much if you have a large number of
  nodes and small number of clients who are regularly stuck making requests to
  a single node.

  Ideally, clients should be rapidly switching beween CrateDB nodes, to make
  best use of the cluster.

Use a Load Balancer
-------------------

Stick your CrateDB cluster in front of a load balancer.

With something like `HAProxy`_, you can configure a round robin load balancing
with something like this in your config:

.. code-block:: text

    backend cratedb-cluster
    balance roundrobin
    server cratedb1 192.0.2.1:4200 check
    server cratedb2 192.0.2.2:4200 check
    server cratedb3 192.0.2.3:4200 check

With this setup, your client applications would all point directly at the load
balancer. The load balancer then distributes requests across your cluster.

This technique comes with the added benefit that most load balancers (like
HAProxy) will monitor the cluster and provide health checks, analytics
dashboards, and so on.

Client Connection Pooling
-------------------------

If your client supports it, connection pooling can be a good way to both load
balance requests as well as make use of connection reuse. This may offer
performance benefits over a fully featured load balancer.

`HikariCP`_ is a connection pool that works with the CrateDB `JDBC client`_.

Testing Parallel Inserts
========================

Follow the instructions in our :ref:`testing_inserts_performance` guide.

To test parallel inserts, you should:

1. Configure the setup you would like to test

2. Run a number of different tests against that setup, using different
   ``--concurrency`` settings

3. Plot your results on a graph to see the performance curve of your setup
   (i.e. how your setup responds to different loads)

4. Start over

At the end of this process, you will have a number of performance curve graphs
for the different setups you are interested in testing.

.. _HAProxy: http://www.haproxy.org/
.. _A record: https://en.wikipedia.org/wiki/List_of_DNS_record_types?
.. _Python client: https://crate.io/docs/clients/python/en/latest/
.. _JDBC client: https://crate.io/docs/clients/jdbc/en/latest/
.. _PHP PDO client: https://crate.io/docs/clients/pdo/en/latest/
.. _HikariCP: https://github.com/brettwooldridge/HikariCP
