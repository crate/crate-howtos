.. highlight:: psql
.. _recover:
.. _conf-env:

===================================
Troubleshooting with Crate node CLI
===================================
This part of the CrateDB documentation is based on the `Elasticsearch
Reference [7.2] <https://www.elastic.co/guide/en/elasticsearch/reference/current/node-tool.html>`_.

The Crate node CLI enables you to form a new cluster if a CrateDB cluster
irrecoverably loses the majority of the master-eligible nodes. To form a new
cluster, the Crate node CLI allows you to use the state of the remaining master
nodes.

This solution includes certain unsafe operations that are only possible while a
node is shut down.

You can temporarily shut down nodes for several reasons, e.g., maintenance or
systems failure. Once a node is shut down, you need to restart it to let the
node rejoin the cluster. However, rejoining nodes isn’t always possible. For
instance, a node could be irreparable and would not restart. With the cluster
still available, you can replace a broken node by a new node on a new host.

Modifying a node
================
The ``crate-node`` command enables you to adjust the role of a node and may also
be able to recover some data after a disaster.

You first have to call up the node, in order to modify it. Use these arguments:

.. code-block:: console

   bin/crate-node repurpose|unsafe-bootstrap|detach-cluster
   [--ordinal <Integer>] [-C <KeyValuePair>]
   [-h, --help] ([-s, --silent] | [-v, --verbose])

The ``crate-node`` command has three modes — repurpose, unsafe-bootstrap, and
detach cluster:

* Use ``crate-node repurpose`` to delete data from a node if it used to be a
  data node or a master-eligible node but has been repurposed to have none of
  these roles.

* Use ``crate-node unsafe-bootstrap`` to perform unsafe cluster bootstrapping.
  It forces one of the nodes to form a new cluster on its own, using its local
  copy of the cluster metadata.

* Use ``crate-node detach-cluster`` to move nodes from one cluster to another,
  move nodes into a new cluster created with ``crate-node unsafe-bootstrap``,
  and move nodes into a brand-new cluster if ``crate-node unsafe-bootstrap`` was
  not possible.

Changing the role of a node
---------------------------

Certain situations may require you to change the initial type of a node by
modifying and deleting its on-disk data.

Run ``crate-node repurpose`` on a node with ``node.data: false`` and
``node.master: true`` to delete any remaining shard data on that node. Deleting
remaining shard data on the node does not touch on the table metadata and
cluster metadata.

Run ``crate-node repurpose`` on a node with ``node.data: false`` and
``node.master: false`` to delete any remaining shard data and table
metadata. Deleting remaining shard data and table metadata does not touch on the
cluster metadata.

The command ``crate-node repurpose`` is intended to:

* Stop the node

* Update the `crate.yml config file` by setting ``node.master`` and
  ``node.data`` as desired

* Run ``crate-node repurpose`` on the node

* Restart the node

.. _conf-env-repurposing-a-node-as-master:

Repurposing a node as a dedicated master node
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To repurpose a data node as a master node, you have to change the settings of
the node in the `crate.yml config file`.

Change the settings as follows:

* ``node.master: true``
* ``node.data: false``

Repurposing a node as a coordination-only node
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To repurpose a data node as a coordination-only node, you have to change the
settings of the node in the `crate.yml config file`.

.. WARNING::

  Giving the following command can lead to data loss. Before giving this
  command, make sure the data contained is available on other nodes in the
  cluster.

Change the settings as follows:

* ``node.master: false``
* ``node.data: false``

The tool provides a summary of the data to be deleted and asks for confirmation
before it makes any changes. You can get detailed information about the affected
tables and shards by passing the verbose (-v) option.

Recovering data after a disaster
--------------------------------

Sometimes CrateDB nodes are temporarily stopped to perform maintenance
activities or because of hardware failure. Depending on your configuration,
the cluster may be able to remain available even while one or more of the
cluster's nodes are stopped. After you resolve the temporary condition and
restart the node, the node rejoins the cluster and continues normally.

Each node stores its data in the data directories defined by the ``path.data``
setting. Meaning that in a disaster you can restart a node by moving its data
directories to another host. You can only move data directories to other hosts,
however, if those data directories can be recovered from the faulty host.

CrateDB requires a response from a majority of the master-eligible nodes
to be able to elect a master and update the cluster state. A majority of the
master-eligible nodes responding means that if you have three master-eligible
nodes, the cluster remains available even if one of the nodes has failed.
However, if two of the three master-eligible nodes fail the cluster is
unavailable until at least one of the nodes restarts.

Under certain circumstances, it is not possible to restart enough nodes to
restore the cluster’s availability. In such a disaster, we recommend you
build a new cluster from a recent snapshot and reimport any data that was
ingested since that snapshot was taken.

If it is not possible to recover the cluster from a recent snapshot,
it may be possible to use the Crate node CLI to construct a new cluster that
contains some of the data from the failed cluster.

.. _conf-env-after-disaster-unsafe-bootstrapping:

Unsafe cluster bootstrapping
----------------------------

If there is at least one remaining master-eligible node, but it is not possible
to restart a majority of the nodes, you can unsafely override the cluster’s
voting configuration as if performing another cluster-bootstrapping process.

If you have a choice of nodes on which to run this tool, then choose
the one with the largest term. If there is more than one node
with the same term, choose the one with the highest version.

.. NOTE::

  This information identifies the node with the freshest cluster state, which
  minimizes the quantity of data that might be lost.

Example
~~~~~~~
If the first node reports (4, 12) and a second node reports (5, 3), then prefer
the second node for its larger term. If the second node reports (3, 17), then
you prefer the first node for its larger term. If the second node reports
(4, 10) then it has the same term as the first node but a smaller version, so
then you prefer the first node.

Follow this sequence before running the unsafe-bootstrap tool
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* Make entirely sure you have lost access to at least half of the
  master-eligible nodes in the cluster.

* Make entirely sure the lost master-eligible nodes cannot be repaired or
  recovered by moving their data paths to healthy hardware

* Stop all remaining nodes

* Choose one of the remaining master-eligible nodes to become the new elected
  master, as described in :ref:`conf-env-repurposing-a-node-as-master`

* On the chosen node, run the ``unsafe-bootstrap`` command as demonstrated
  below. Verify that the tool-reported master node was successfully
  bootstrapped

* Start this node and verify that it is the elected master node

* Run the ``detach-cluster`` tool as demonstrated below on every other node in
  the cluster

* Start all other nodes and verify that each node joins the cluster

* Investigate the data in the cluster to discover if any data was lost during
  the process

When you run the tool it makes sure that the node used to bootstrap the cluster
is not running.

.. NOTE::

  The tool does not self-reliantly check for not-running master-eligible nodes.
  Make sure that all other master-eligible nodes are not running.

The message `Master node was successfully bootstrapped` means that the tool
successfully completed its job. It does not say that there has not been a data
loss.

.. WARNING::

  The next step can lead to arbitrary data loss since the target node may not
  hold the latest cluster metadata. Outdated metadata may make it impossible
  to use some or all of the tables in the cluster.

To unsafely bootstrap the cluster, run:

``crate-node unsafe-bootstrap``

The target node now forms a new single-node cluster on its own by using
the cluster metadata it locally holds.

Next, migrate any other surviving nodes from the failed cluster into the new
cluster:

``crate-node detach-cluster``

You can now analyze the state of the new node. On the node, run this command:

``crate-node unsafe-bootstrap``

The tool reports the term and version of the cluster state as follows:

.. code-block:: console

    Current node cluster state (term, version) pair is (4, 12)

It then asks for confirmation before taking action.

Detaching a node from its cluster
---------------------------------

When a node initially joins a cluster, the unique cluster-ID of the node is
stored as metadata. Storing the cluster-ID of the node as metadata prevents the
node from joining a cluster that has a different cluster-ID.

There are situations where it becomes necessary to reset the cluster-ID of a
node. If a cluster is not recoverable, it might be worth moving nodes to a new
cluster. Moving nodes to a new cluster is particularly useful when the voting
configuration of a node has been reset, and a new cluster is bootstrapped.

.. WARNING::

  Moving nodes between clusters can lead to arbitrary data loss. Different
  clusters can have utterly different cluster metadata, and there is no way to
  merge the metadata of two clusters safely.

Each cluster creates a unique identifier at its initial start-up to protect
yourself against inadvertently joining the wrong clusters. This unique
identifier is known as the cluster UUID (Universal Unique ID). Every node
records the UUID of its cluster and refuses to join a cluster with a different
UUID.

However, if the cluster of a node permanently fails then you may want to move
the node into a new cluster.

To reset the cluster UUID of a node and detach the node from its cluster,
give this command:

``crate-node detach-cluster``

The node can now join another cluster with a different UUID.

For example, after unsafe cluster bootstrapping you need to detach all other
surviving nodes from their old cluster so that they can join the new,
unsafely-bootstrapped cluster.

.. WARNING::

  Executing this command can lead to arbitrary data loss. Run this tool only
  if you understand and accept the possible consequences. Also only run it if
  you have exhausted all other possibilities for the recovery of your cluster.

Follow this sequence before using the detach-cluster tool
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* Make entirely sure you have lost access to each of the master-eligible
  nodes in the cluster.

* Make entirely sure that the master-eligible nodes cannot be repaired or
  recovered by moving their data paths to healthy hardware

* Start a new cluster and verify that it is healthy. The cluster may comprise
  one or more new master-eligible nodes, or maybe an unsafely-bootstrapped
  cluster, formed in the section
  :ref:`conf-env-re-purposing-nodes-unsafe-bootstrapping`

* Stop all remaining data nodes.

* On each data node, run the ``detach-cluster`` tool as demonstrated below.
  Verify that the tool-reported node was successfully detached from the cluster.

* If necessary, configure each data node to discover the new cluster.

* Start each data node and verify that it has joined the new cluster.

* Wait for all recoveries to complete, and investigate the data in the
  cluster to find out if any data was lost during this process.

The message `Node was successfully detached from the cluster` means that the
detach-cluster tool successfully completed its job. It does not say that there
has not been a data loss.

Parameters
----------

* ``repurpose``
    Delete excess data when a node’s role is changed.

* ``unsafe-bootstrap``
    Unsafely bootstrap this node as a new one-node cluster.

* ``detach-cluster``
    Specify to unsafely detach this node from its cluster so it can join
    another cluster.

* ``--ordinal <Integer>``
    Specify which node to target if there is more than one node sharing a data
    path. Defaults to 0, meaning to use the first node in the data path.

* ``-C <KeyValuePair>``
    Configure a setting.

* ``-h, --help``
    Return all of the command parameters.

* ``-s, --silent``
    Show minimal output.

* ``-v, --verbose``
    Show verbose output.

Example
-------
Repurposing a node as a dedicated master node
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following example shows you how to repurpose a former data node as a
dedicated master node.

First update the settings in the `crate.yml config file` of the node to:

* ``node.master: true``
* ``node.data: false``

.. NOTE::

  Before you continue with the next step, you need to stop CrateDB.

Run ``crate-node repurpose`` to find and remove excess shard data:

.. code-block:: console

    node$ ./bin/crate-node repurpose

    Found 2 shards in 2 tables to clean up.
    Use -v to see list of paths and tables affected.
    Node is being repurposed as master and no-data. Clean-up of shard data will
    be performed.

    Do you want to proceed?

    Confirm [y/n] y
    Node successfully repurposed to master and no data.

Repurposing a node as a coordinating-only node
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This example shows you how to repurpose a node, that previously held data, as a
coordinating-only node.

First update the settings in the `crate.yml config file` of the node to:

* ``node.master: false``
* ``node.data: false``

.. NOTE::

  Before you continue with the next step, you need to stop CrateDB.

Run ``crate-node repurpose`` to find and remove excess shard data and table
metadata:

.. code-block:: console

    node$./bin/crate-node repurpose

    Found 2 tables (2 shards and 2 table metadata) to clean up.
    Use -v to see list of paths and tables affected.
    Node is being repurposed as no-master and no-data. Clean-up of table data
    is performed.

    Do you want to proceed?

    Confirm [y/n] y
    Node successfully repurposed to no-master and no-data.

.. _conf-env-re-purposing-nodes-unsafe-bootstrapping:

Unsafe cluster bootstrapping
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You should only run this tool if you have permanently lost half or more
of the master-eligible nodes in this cluster. Also only run this tool if you
cannot restore the cluster from a snapshot. If you have multiple surviving
master-eligible nodes, you should run this tool on the node with the highest
cluster state (term, version) pair.

Suppose your cluster has had five master-eligible nodes and you have permanently
lost three of them, leaving two nodes remaining. In such a case you can unsafely
bootstrap the cluster.

.. NOTE::

    Before you run ``crate-node unsafe-bootstrap`` you need to stop CrateDB.

.. WARNING::

    This tool can cause arbitrary data loss, and its use should be your last
    resort.

* Run ``crate-node unsafe-bootstrap`` on the first remaining node
  and answer ``n`` at the confirmation step.

.. code-block:: console

    node_1$ ./bin/crate-node unsafe-bootstrap

    Current node cluster state (term, version) pair is (4, 12)

    Do you want to proceed?

    Confirm [y/n] n

* Run ``crate-node unsafe-bootstrap`` on the second remaining node
  and answer ``n`` at the confirmation step.

.. code-block:: console

    node_2$ ./bin/crate-node unsafe-bootstrap

    Current node cluster state (term, version) pair is (5, 3)

    Do you want to proceed?

    Confirm [y/n] n

Since the second node has a greater term it has a fresher cluster state, so it
is better to unsafely bootstrap the cluster using the second node.

* Run ``crate-node unsafe-bootstrap`` on the second remaining node and answer
  ``y`` at the confirmation step.

.. code-block:: console

    node_2$ ./bin/crate-node unsafe-bootstrap

    Current node cluster state (term, version) pair is (5, 3)

    Do you want to proceed?

    Confirm [y/n] y
    Master node was successfully bootstrapped.

Detaching nodes from the failed cluster
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can now detach all remaining nodes from the failed cluster so that they can
join the new cluster.

You should only run this tool if you have permanently lost all of the
master-eligible nodes in this cluster. Also only run this tool if you cannot
restore the cluster from a snapshot and you have already unsafely bootstrapped a
new cluster by running ``crate-node unsafe-bootstrap`` on a master-eligible node
that belonged to the same cluster as this node.

.. NOTE: Before you continue with the next step, you need to stop CrateDB.

.. WARNING:: This tool can cause arbitrary data loss, and its use should be your
             last resort.

Run ``crate-node detach-cluster`` and answer ``y`` at the confirmation step.

.. code-block:: console

    node_3$ ./bin/crate-node detach-cluster

    Do you want to proceed?

    Confirm [y/n] y
    Node was successfully detached from the cluster.
