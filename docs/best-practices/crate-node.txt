.. highlight:: psql
.. _recover:

===================================
Troubleshooting with Crate node CLI
===================================
This part of the CrateDB documentation is based on the `Elasticsearch
documentation <https://www.elastic.co/guide/en/elasticsearch/reference/current/node-tool.html>`_.

The Crate node CLI allows you to form a new cluster if a CrateDB cluster
irrecoverably loses the majority of the master-eligible nodes, by letting you
use the state of the remaining master nodes.

This solution includes certain unsafe operations that are only possible while a
node is shut down.

You can temporarily shut down nodes for several reasons e.g. maintenance or
systems failure. Once a node is shut down, you need to restart it to let the
node rejoin the cluster. However, re-joining nodes isn’t always possible. For
instance, a node could be irreparable and would not restart. With the cluster
still available, you can simply replace a broken node by a new node on a new
host.

Modifying a node
================
The ``crate-node`` command enables you to adjust the role of a node. It may also
be able to recover some data after a disaster.

To modify a node, you have to first call up the node. Use these arguments:

.. code-block:: console

   bin/crate-node repurpose|unsafe-bootstrap|detach-cluster
   [--ordinal <Integer>] [-C <KeyValuePair>]
   [-h, --help] ([-s, --silent] | [-v, --verbose])

The ``crate-node`` command has three modes — repurpose, unsafe-bootstrap, and
detach cluster:

* Use ``crate-node repurpose`` to delete data from a node if it
  used to be a data node or a master-eligible node but has been re-purposed not
  to have one or other of these roles.

* Use ``crate-node unsafe-bootstrap`` to perform unsafe cluster bootstrapping.
  It forces one of the nodes to form a new cluster on its own, using its local
  copy of the cluster metadata.

* Use ``crate-node detach-cluster`` to move nodes from one cluster to another,
  move nodes into a new cluster created with ``crate-node unsafe-bootstrap``,
  and move nodes into a brand-new cluster if ``crate-node unsafe-bootstrap`` was
  not possible.

Changing the role of a node
---------------------------

Certain situations may require you to change the initial type of a node by
modifying and deleting its on-disk data.

Run ``crate-node repurpose`` on a node with ``node.data: false`` and
``node.master: true`` to delete any remaining shard data on that node. This
leaves the table metadata and cluster metadata alone.

Run ``crate-node repurpose`` on a node with ``node.data: false`` and
``node.master: false`` to delete any remaining shard data and table
metadata. This only leaves the cluster metadata alone.

The ``crate-node repurpose`` command is intended to:

* Stop the node.

* Update crate.yml by setting ``node.master`` and ``node.data`` as desired.

* Run ``crate-node repurpose`` on the node.

* Restart the node.

**Repurposing a node as a dedicated master node**

If you want to re-purpose a data-node as a master-node, change the settings of
the node in crate.yml to:

*``node.master: true``
*``node.data: false``

**Repurposing a node as a coordination-only node**

.. WARNING::

Giving the following command can lead to data loss. Before giving this command,
make sure the data contained is available on other nodes in the cluster.

If you want to re-purpose a data-node as a coordination-only node, change the
settings of the node in crate.yml to:

*``node.master: false``
*``node.data: false``

This re-purposes the node as a coordination-only node.

The tool provides a summary of the data to be deleted and asks for confirmation
before making any changes. You can get detailed information about the affected
tables and shards by passing the verbose (-v) option.

Recovering data after a disaster
--------------------------------

Sometimes CrateDB nodes are temporarily stopped to perform maintenance
activities or because of hardware failure. Depending on your configuration,
the cluster may be able to remain available even while one or more
of its nodes are stopped. After you resolve the temporary condition and restart
the node, the node re-joins the cluster and continues normally.

Each node stores its data in the data directories defined by the ``path.data``
setting. Meaning that in a disaster you can re-start a node by moving
its data directories to another host, if those data directories can be recovered
from the faulty host.

CrateDB requires a response from a majority of the master-eligible nodes
to be able to elect a master and update the cluster state. This means that if
you have three master-eligible nodes the cluster will remain available even
if one of the nodes has failed. However, if two of the three master-eligible
nodes fail the cluster will be unavailable until at least one of the nodes
re-start.

Under certain circumstances, it is not possible to re-start enough nodes to
restore the cluster’s availability. In such a disaster, we recommend you
build a new cluster from a recent snapshot and re-import any data that was
ingested since that snapshot was taken.

However, if it is not possible to recover the cluster from a recent snapshot,
it may be possible to use the Crate node CLI to construct a new cluster that
contains some of the data from the failed cluster.

Unsafe cluster bootstrapping
----------------------------

If there is at least one remaining master-eligible node, but it is not possible
to re-start a majority of the nodes, you can unsafely override the cluster’s
voting configuration as if performing another cluster bootstrapping process.

If you have a choice of nodes on which to run this tool then choose
the one with the largest term. If there is more than one node
with the same term, choose the one with the largest version.

.. NOTE::

This information identifies the node with the freshest cluster state, which
minimizes the quantity of data that might be lost.

**Example**
If the first node reports (4, 12) and a second node reports (5, 3),
then the second node is preferred since its term is larger. However if the
second node reports (3, 17) then the first node is preferred since its term is
larger. If the second node reports (4, 10) then it has the same term as the
first node but has a smaller version, so the first node is preferred.

**Follow this sequence before using the unsafe-bootstrap tool**

* Make sure you have definitely lost access to at least half of the
  master-eligible nodes in the cluster and they cannot be repaired or recovered
  by moving their data paths to healthy hardware.

* Stop all remaining nodes.

* Choose one of the remaining master-eligible nodes to become the new elected
  master as described in `Repurposing a node as a dedicated master node`_.

* On the chosen node, run the ``unsafe-bootstrap`` command as demonstrated
  below. Verify that the tool-reported master node was successfully
  bootstrapped.

* Start this node and verify that it is elected as the master node.

* Run the ``detach-cluster`` tool as demonstrated below on every other node in
  the cluster.

* Start all other nodes and verify that each node joins the cluster.

* Investigate the data in the cluster to discover if any data was lost during
  the process.

* When you run the tool it will make sure that the node that is being used
  to bootstrap the cluster is not running.

.. NOTE::

  Make sure that all other master-eligible nodes are also not running as the
  tool will not check
  ensure this itself.

The message `Master node was successfully bootstrapped` means that the tool was
able to complete its job. It does not mean that there has not been a
data loss.

.. WARNING::

  The next step can lead to arbitrary data loss since the target node may not
  hold the latest cluster metadata. Outdated metadata may make it impossible
  to use some or all of the tables in the cluster.

To unsafely bootstrap the cluster, run:

``crate-node unsafe-bootstrap``

The target node now forms a new single-node cluster on its own by using
the cluster metadata it locally holds.

Next, migrate any other surviving nodes from the failed cluster into the new
cluster:

``crate-node detach-cluster``

You can now analyze the state of the new node. On the node, run this command:

``crate-node unsafe-bootstrap``

The tool will report the term and version of the cluster state, as following:

.. code-block:: console

Current node cluster state (term, version) pair is (4, 12)

It will then ask for confirmation before taking action.

Detaching a node from its cluster
---------------------------------

When a node initially joins a cluster, the node’s unique cluster ID will be
stored as metadata. This prevents the node from joining a cluster with a
different cluster ID.

There are situations where it becomes necessary to reset a node’s cluster ID.
If a cluster is not recoverable, it might be worth moving nodes to a new
cluster. This is particularly useful when the voting configuration of a node has
been reset, and a new cluster is bootstrapped.

.. WARNING::

Moving nodes between clusters can lead to arbitrary data loss. Different
clusters can have completely different cluster metadata and there is no way to
safely merge the metadata of two clusters.

To protect yourself against inadvertently joining the wrong clusters, each
cluster creates a unique identifier at its initial start-up — known as the
cluster UUID. Every node records the UUID of its cluster and refuses to join a
cluster with a different UUID.

However, if a node’s cluster permanently failed then you may want to move the
node into a new cluster.

To reset a node’s cluster UUID and detach the node from its cluster, give this
command:

``crate-node detach-cluster``

The node can then join another cluster with a different UUID.

For example, after unsafe cluster bootstrapping you need to detach all
the other surviving nodes from their old cluster so they can join the new,
unsafely-bootstrapped cluster.


.. WARNING::

  Execution of this command can lead to arbitrary data loss. Only run this tool
  if you understand and accept the possible consequences and have exhausted all
  other possibilities for the recovery of your cluster.

**Follow this sequence before using the detach-cluster tool**

* Make sure you have definitely lost access to every one of the master-eligible
  nodes in the cluster and they cannot be repaired or recovered by moving their
  data paths to healthy hardware.

* Start a new cluster and verify that it is healthy. This cluster may comprise
  one or more new master-eligible nodes, or maybe an unsafely-bootstrapped
  cluster formed in the section `Unsafe cluster bootstrapping`_.

* Stop all remaining data nodes.

* On each data node, run the ``detach-cluster`` tool as shown below. Verify that
  the tool-reported node was successfully detached from the cluster.

* If necessary, configure each data node to discover the new cluster.

* Start each data node and verify that it has joined the new cluster.

* Wait for all recoveries to complete, and investigate the data in the
  cluster to find out if any data was lost during this process.

The message `Node was successfully detached from the cluster` means that the
detach-cluster tool was able to complete its job. It does not mean that there
has not been a data loss.

Parameters
----------

``repurpose``
  Delete excess data when a node’s role is changed.

``unsafe-bootstrap``
  Unsafely bootstrap this node as a new one-node cluster.

``detach-cluster``
  Specify to unsafely detach this node from its cluster so it can join
  another cluster.

``--ordinal <Integer>``
Specify which node to target, if there is more than one node sharing a data
path. Defaults to 0, meaning to use the first node in the data path.

``-C <KeyValuePair>``
  Configure a setting.

``-h, --help``
  Return all of the command parameters.

``-s, --silent``
  Show minimal output.

``-v, --verbose``
  Show verbose output.

Example
-------
Re-purposing a node as a dedicated master node
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following example shows you how to re-purpose a former data node as a
dedicated master node.

First update the settings in the crate.yml config file of the node to:
``node.master: true`` and ``node.data: false``.

.. NOTE:: Before you continue with the next step you need to stop CrateDB.

Run ``crate-node repurpose`` to find and remove excess shard data:

.. code-block:: console

    node$ ./bin/crate-node repurpose

    Found 2 shards in 2 tables to clean up.
    Use -v to see list of paths and tables affected.
    Node is being re-purposed as master and no-data. Clean-up of shard data will
    be performed.

    Do you want to proceed?

    Confirm [y/N] y
    Node successfully re-purposed to master and no-data.

Re-purposing a node as a coordinating-only node
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This example shows you how to re-purpose a node, that previously held data, as a
coordinating-only node.

First update the settings in the crate.yml config file of the node to:
``node.master: false`` and ``node.data: false``.

.. NOTE:: Before you continue with the next step you need to stop CrateDB.

Run ``crate-node repurpose`` to find and remove excess shard data and table
metadata:

.. code-block:: console

    node$./bin/crate-node repurpose

    Found 2 tables (2 shards and 2 table metadata) to clean up.
    Use -v to see list of paths and tables affected.
    Node is being re-purposed as no-master and no-data. Clean-up of table data
    will be performed.

    Do you want to proceed?

    Confirm [y/N] y
    Node successfully re-purposed to no-master and no-data.

Unsafe cluster bootstrapping
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You should only run this tool if you have permanently lost half or more
of the master-eligible nodes in this cluster, and you cannot restore the
cluster from a snapshot. If you have multiple surviving master
eligible nodes, you should run this tool on the node with the highest
cluster state (term, version) pair.

Suppose your cluster had five master-eligible nodes and you have permanently
lost three of them, leaving two nodes remaining.

.. NOTE:: Before you run ``crate-node unsafe-bootstrap`` you need to stop
          CrateDB.

..WARNING:: This tool can cause arbitrary data loss and its use should be your
            last resort.

* Run ``crate-node unsafe-bootstrap`` on the first remaining node
  and answer ``n`` at the confirmation step.

.. code-block:: console

    node_1$ ./bin/crate-node unsafe-bootstrap

    Current node cluster state (term, version) pair is (4, 12)

    Do you want to proceed?

    Confirm [y/N] n

*   Run ``crate-node unsafe-bootstrap`` on the second remaining node and
    answer ``n`` at the confirmation step.

.. code-block:: console

    node_2$ ./bin/crate-node unsafe-bootstrap

    Current node cluster state (term, version) pair is (5, 3)

    Do you want to proceed?

    Confirm [y/N] n

Since the second node has a greater term it has a fresher cluster state, so it
is better to unsafely bootstrap the cluster using the second node.

*   Run ``crate-node unsafe-bootstrap`` on the second remaining node and answer
    ``y`` at the confirmation step.

.. code-block:: console

    node_2$ ./bin/crate-node unsafe-bootstrap

    Current node cluster state (term, version) pair is (5, 3)

    Do you want to proceed?

    Confirm [y/N] y
    Master node was successfully bootstrapped

Detaching nodes from the failed cluster
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can now detach all remaining nodes from the failed cluster so they can join
the new cluster.

You should only run this tool if you have permanently lost all of the
master-eligible nodes in this cluster and you cannot restore the cluster
from a snapshot. Also only run this tool if you have already unsafely
bootstrapped a new cluster by running ``crate-node unsafe-bootstrap``
on a master-eligible node that belonged to the same cluster as this node.

.. NOTE: Before you continue with the next step you need to stop CrateDB.

.. WARNING:: This tool can cause arbitrary data loss and its use should be your
             last resort.

Run ``crate-node detach-cluster`` and answer ``y`` at the confirmation step.

.. code-block:: console

    node_3$ ./bin/crate-node detach-cluster

    Do you want to proceed?

    Confirm [y/N] y
    Node was successfully detached from the cluster
